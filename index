<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Semantic Collapse</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Courier+Prime:wght@400;700&family=Inter:wght@400;700&display=swap" rel="stylesheet">
    <style>
        /* A simple style guide for a world weary of ornamentation. */
        body {
            background-color: #111111;
            color: #E0E0E0;
            font-family: 'Inter', sans-serif;
        }
        canvas {
            background-color: #1a1a1a;
            border: 1px solid #333;
        }
        input, button {
            font-family: 'Courier Prime', monospace;
        }
        .title-text {
            font-family: 'Courier Prime', monospace;
            font-weight: 700;
        }
    </style>
</head>
<body class="flex flex-col items-center justify-center min-h-screen p-4 md:p-8">

    <!-- The stage for our little drama of deconstruction. -->
    <div class="w-full max-w-4xl text-center">
        <h1 class="text-2xl md:text-4xl mb-2 title-text">Semantic Collapse</h1>
        <p class="text-sm md:text-base text-gray-500 mb-6">The path is a failed narrative. Expose its tautological core.</p>

        <div class="mb-6">
            <input type="text" id="utf8-input"
                   class="w-full max-w-lg p-3 bg-gray-800 border border-gray-600 rounded-md text-gray-200 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-gray-400"
                   placeholder="State your thesis...">
        </div>
        <button id="collapse-button"
                class="px-8 py-3 bg-gray-200 text-gray-900 font-bold rounded-md hover:bg-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-900 focus:ring-white transition-colors">
            Collapse
        </button>
    </div>

    <!-- The canvas where the argument is visually dismantled. -->
    <div class="w-full max-w-4xl mt-8 aspect-video">
        <canvas id="plot-canvas"></canvas>
    </div>

    <script>
        // The machinery of intellectual honesty.
        const canvas = document.getElementById('plot-canvas');
        const ctx = canvas.getContext('2d');
        const input = document.getElementById('utf8-input');
        const button = document.getElementById('collapse-button');

        let points = [];
        let singularity = null;

        // Ensure the canvas is not a fixed, sad rectangle. It must adapt.
        function resizeCanvas() {
            const container = canvas.parentElement;
            const size = Math.min(container.clientWidth, container.clientHeight);
            canvas.width = container.clientWidth;
            canvas.height = container.clientHeight;
            // Re-plot if we have something to show, otherwise it's just an empty void.
            if (points.length > 0) {
                drawCollapse();
            }
        }

        /**
         * The core logic. It reads the narrative, finds its singular truth,
         * and shows everything else for the noise it is.
         * @param {string} text - The input string, a sequence of symptoms.
         */
        function plotSemanticCollapse(text) {
            if (!text) {
                // An empty statement is its own kind of collapse. Poetic.
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                points = [];
                singularity = null;
                return;
            };

            // 0. HASHING - We need a deterministic, but chaotic, layout.
            // A simple pseudo-random number generator seeded by the string itself.
            // This ensures the same string always produces the same initial chaos.
            let seed = 0;
            for (let i = 0; i < text.length; i++) {
                seed = (seed + text.charCodeAt(i)) & 0xffffffff;
            }
            const seededRandom = () => {
                seed = (seed * 16807 + 1) % 2147483647;
                return (seed - 1) / 2147483646;
            };


            // 1. LEXICAL FIELD GENERATION
            // First, map each character to a point. Its position is arbitrary, a mere pretense.
            // Then, determine its "weight" by its rarity. Common words are cheap.
            const frequencies = {};
            for (const char of text) {
                frequencies[char] = (frequencies[char] || 0) + 1;
            }

            points = Array.from(text).map(char => {
                // The weight is its narrative inertia. Rare ideas resist collapse more.
                // An inverse frequency relationship. Add 1 to avoid division by zero for new ideas.
                const weight = 1 / frequencies[char];
                return {
                    char,
                    x: seededRandom() * canvas.width,
                    y: seededRandom() * canvas.height,
                    weight: weight
                };
            });

            // 2. IDENTIFYING THE NARRATIVE SINGULARITY
            // The center of narrative gravity. The punchline.
            let totalWeight = 0;
            let weightedSumX = 0;
            let weightedSumY = 0;

            points.forEach(p => {
                weightedSumX += p.x * p.weight;
                weightedSumY += p.y * p.weight;
                totalWeight += p.weight;
            });

            if (totalWeight === 0) {
                // A perfectly balanced, meaningless statement. Center it in the void.
                singularity = { x: canvas.width / 2, y: canvas.height / 2 };
            } else {
                singularity = {
                    x: weightedSumX / totalWeight,
                    y: weightedSumY / totalWeight
                };
            }

            // 3 & 4. THE COLLAPSE & FINAL PLOT
            drawCollapse();
        }

        /**
         * Draws the final state of the collapsed narrative.
         * This is not a path; it is a verdict.
         */
        function drawCollapse() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            if (!singularity) return;

            // Draw the collapse vectors. Each a line of concession to the central truth.
            points.forEach(p => {
                // Weaker points fade into the background. Their arguments are thin.
                const alpha = Math.max(0.1, Math.min(0.8, p.weight));
                ctx.beginPath();
                ctx.moveTo(p.x, p.y);
                ctx.lineTo(singularity.x, singularity.y);
                ctx.strokeStyle = `rgba(224, 224, 224, ${alpha})`;
                ctx.lineWidth = 1;
                ctx.stroke();
            });

            // Draw the Narrative Singularity. It is the only thing that remains.
            ctx.beginPath();
            ctx.arc(singularity.x, singularity.y, 4, 0, 2 * Math.PI);
            ctx.fillStyle = '#FFFFFF';
            ctx.fill();
            ctx.strokeStyle = '#111111';
            ctx.lineWidth = 2;
            ctx.stroke();
        }

        // Event listeners. The user provides the thesis, we provide the critique.
        button.addEventListener('click', () => plotSemanticCollapse(input.value));
        input.addEventListener('keyup', (e) => {
            if (e.key === 'Enter') {
                plotSemanticCollapse(input.value);
            }
        });

        // Listen for the world changing its mind about the canvas size.
        window.addEventListener('resize', resizeCanvas);

        // Initial setup.
        resizeCanvas();
        // A default, for demonstration of the void.
        plotSemanticCollapse("The quick brown fox jumps over the lazy dog.");
    </script>

</body>
</html>
